{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3c5f9b3a-cdba-486b-a255-0db05bad2824",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Model  Accuracy  Precision    Recall  F1-Score\n",
      "0        Random Forest  0.924883   0.926067  0.924883  0.925117\n",
      "1        Decision Tree  0.896714   0.894221  0.896714  0.895220\n",
      "2  Logistic Regression  0.833333   0.884259  0.833333  0.849130\n",
      "3  K-Nearest Neighbors  0.896714   0.908426  0.896714  0.900925\n"
     ]
    },
    {
     "data": {
      "image/png": "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7fP9+OOPRpJ59913HZbXqlUrY7PZzO7du40xxsTExBhJ5pVXXnGo1759eyPJREVF2cu6dOligoKCzOnTpx3qPvvss8bPz8/ern379hlJZtKkSbfdvhMnTpg8efKYCRMm2Mseeugh06xZM4d6EydONJLMqFGj0iwjJSXFGGPM77//biSZ3r17Z1jnVm27eXujoqKMJNOuXbs0dVO39UbTpk0zksyKFSvsZZGRkcbFxcVs2LAhwzZ9+eWXRpKJjY21T0tKSjL+/v6mY8eOaea7UZUqVYyfn98t69y4zCJFipgHH3zQXLp0yV7+66+/Gklm8ODB9rKOHTsaSWb48OH2sr///tt4eXkZm81mpk+fbi/fsWNHmn2X2m+rVatmkpKS7OUffvihkWR++ukne1l6+/LFF180efPmNZcvX7aXNWjQwEgy48ePT1O/QYMGpkGDBvbnzZo1Mw888MAt90fz5s2Nu7u72bNnj73s6NGjJl++fObhhx9Osy3h4eH218wYY1599VXj6upqzp07d8v1APgfzswC/3Jt2rTRpUuX9OuvvyoxMVG//vprhpcYzJ07V66ururdu7dD+WuvvSZjjObNm2evJylNvb59+zo8N8Zo1qxZioiIkDFGp0+ftj8aN26s+Ph4RUdHZ3mbpk+fLhcXFz3zzDP2snbt2mnevHkOX0fPmjVL/v7+6tWrV5pl2Gw2ex2bzaaoqKgM69yJl156KU2Zl5eX/e/Lly/r9OnTql27tiTZ90NKSop+/PFHRUREqHr16hm2qU2bNvL09HQ4O7tgwQKdPn1azz333C3blpCQoHz58mVqOzZu3KiTJ0/qlVdekaenp728adOmKlu2rH777bc083Tt2tX+d/78+VWmTBl5e3urTZs29vIyZcoof/782rt3b5r5u3fvLjc3N/vzl19+WXny5LH3O8lxXyYmJur06dOqX7++Ll68qB07djgsz8PDQ507d77ttubPn1+HDx/Whg0b0p2enJyshQsXqnnz5ipRooS9PCgoSO3bt9cff/yhhISENNtyYz+qX7++kpOTdeDAgdu2B8B1hFngX65w4cIKDw/X1KlTNXv2bCUnJ6tVq1bp1j1w4ICCg4PTBJ1y5crZp6f+6+LiopIlSzrUK1OmjMPzU6dO6dy5c/rqq69UuHBhh0dquDh58mSWt+n7779XzZo1debMGe3e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AMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLKeH2XHjxiksLEyenp6qVauW1q9ff8v6586dU48ePRQUFCQPDw+VLl1ac+fOzaXWAgAA4G6Sx5krnzFjhvr166fx48erVq1aGj16tBo3bqy4uDgVKVIkTf2kpCQ99thjKlKkiH744QcVLVpUBw4cUP78+XO/8QAAAHA6p4bZUaNGqVu3burcubMkafz48frtt980ceJEDRw4ME39iRMn6uzZs1q9erXc3NwkSWFhYbnZZAAAANxFnHaZQVJSkjZt2qTw8PD/NcbFReHh4VqzZk268/z888+qU6eOevTooYCAAD344IMaPny4kpOTM1zPlStXlJCQ4PAAAADAvcFpYfb06dNKTk5WQECAQ3lAQICOHz+e7jx79+7VDz/8oOTkZM2dO1dvv/22Ro4cqXfffTfD9YwYMUJ+fn72R0hISLZuBwAAAJzH6TeAZUVKSoqKFCmir776StWqVVPbtm315ptvavz48RnOM2jQIMXHx9sfhw4dysUWAwAAICc57ZpZf39/ubq66sSJEw7lJ06cUGBgYLrzBAUFyc3NTa6urvaycuXK6fjx40pKSpK7u3uaeTw8POTh4ZG9jQcAAMBdwWlnZt3d3VWtWjUtWbLEXpaSkqIlS5aoTp066c5Tt25d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/UeBnH2cZMWHH36oXr16afr06fYfOcpIr169FBUVpStXrmRY53bvN3v27FGzZs0UEBAgHx8f1ahRQ4sXL3ZYRlhY2B0dx59//rlKlSolT09PBQQEqFWrVpKuf9YtX75cn376qb2P7t+/P8NtaNeunc6dO6cJEybccn/cru/dfJnB6tWrVblyZXl6eqp69er68ccfZbPZFBMT47DcTZs2qXr16sqbN68eeughxcXFpVn3l19+qZCQEOXNm1dt2rRRfHy8fVpKSoqGDRum++67Tx4eHvZx/1Nl1OcPHDigiIgIFShQQN7e3nrggQc0d+7cW+6DbGfgdB07djTNmjWzP9+2bZsJDAw0tWrVspcdPnzYfPTRR2bz5s1mz549ZsyYMcbV1dWsW7fOXqdBgwbG19fXDBkyxOzcudN88803xmazmYULFxpjjElOTjYPPvigefTRR01MTIxZvny5qVKlipFk5syZY4wx5vz58yYoKMi0bNnSbNu2zSxZssQUL17cdOzY0aG9+fLlMz169DA7duwwX3/9tZFkGjdubN577z2zc+dO88477xg3Nzdz6NChTG/3jQ4fPmzy5s1rXnnlFRMbG2vmzJlj/P39TVRUlMP2+vj4mP79+5sdO3aYHTt2mL///tsULlzYDBo0yMTGxpro6Gjz2GOPmUaNGhljjDl69KjJkyePGTVqlNm3b5/ZunWrGTdunElMTDSJiYmmTZs2pkmTJubYsWPm2LFj5sqVK5l8Fa3hVvu8UqVK5oknnrA/Dw8PNxEREWbDhg1m586d5rXXXjOFChUyZ86cMcYY8+uvvxpXV1czePBg89dff5mYmBgzfPhw+/yhoaHmk08+McYYM3PmTOPr62vmzp1rDhw4YNatW2e++uqrdOsmJyebypUrm3r16pmNGzeatWvXmmrVqpkGDRrY60dFRRkfHx97P12xYoUJDAw0b7zxRqb2w419PnX9vr6+5uOPPza7d++2P7y9vc0nn3xidu7caVatWmWqVKliOnXqZJ+va9eu5qGHHjIrVqwwu3fvNh999JHx8PAwO3fuzFQ7cts/Pea6du1qQkNDzeLFi822bdtMixYtTL58+UyfPn3sdTL7up85c8bcd999ZtiwYfbjzRhjJk2aZPz8/OzLu10/u9nN8584ccI0atTIuLq6mvPnzxtjjFmxYoXx9fU1kydPNnv27DELFy40YWFhZsiQIcYYY65du2bKlCljHnvsMRMTE2NWrlxpatas6dBv9u3bZySZsLAwM2vWLLN3715z9OhR8/3335ugoCB72axZs0zBggXN5MmTjTHGfPTRRyYkJMSsWLHC7N+/36xcudJMnTr1tvvr5n2bG8fJzVL7z+uvv258fHzM4sWLb1l/6dKlRpI5cuSICQoKMh999JF9mp+fn5k0aZL9+e3eb2JiYsz48ePNtm3bzM6dO81bb71lPD09zYEDBxz2T1aP4w0bNhhXV1czdepUs3//fhMdHW0+/fRTY4wx586dM3Xq1DHdunWz99Fr166lu60NGjQwffr0MaNGjTIBAQH2vvbJJ5+Y0NBQe73b9T1jHN+f4uPjTcGCBc1zzz1ntm/fbubOnWtKly5tJJnNmzc77OdatWqZZcuWme3bt5v69eubhx56yL7MqKgo4+3tbR555BGzefNms3z5cnP//feb9u3b2+uMGjXK+Pr6mmnTppkdO3aY119/3bi5udnfzzLq802bNjWPPfaY2bp1q9mzZ4/55ZdfzPLly2/ZN7IbYfYu0LFjR+Pq6mq8vb2Nh4eHkWRcXFzMDz/8cMv5mjZtal577TX78wYNGph69eo51KlRo4YZMGCAMcaYBQsWmDx58pgjR47Yp8+bN8/hwPnqq69MgQIF7AeiMcb89ttvxsXFxRw/ftze3tDQUJOcnGyvU6ZMGVO/fn3782vXrhlvb28zbdq0TG136qNVq1bGGGPeeOMNU6ZMGZOSkmKvP27cOOPj42Nfb4MGDUyVKlUclvnOO++Yxx9/3KHs0KFDRpKJi4szmzZtMpLM/v37M2xTRh/294JbbV/btm1NuXLljDHGrFy50vj6+prLly871ClZsqT58ssvjTHG1KlTx3To0CHDdd34wTty5EhTunRpk5SUdNu6CxcuNK6urubgwYP26du3bzeSzPr1640x19+Y8+bNaxISEux1+vfv7/AfwFtJL8w2b97coU6XLl1M9+7dHcpWrlxpXFxczKVLl8yBAweMq6urw/FkjDGPPvqoGTRoUKbakdtu9frf7phLSEgwbm5uZubMmfbp586dM3nz5s0wzGbldU91cxi9XT+72aRJk4wk4+3tbfLmzWskGUmmd+/e9jqPPvpomkD83XffmaCgIGPM9ffFPHny2AO2McYsWrQo3TA7evRo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",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "After comparing the models with the help of the bar plot, we conclude that the 'Random Forest' model shows the highest accuracy (0.9249) and is performing well for predicting fetal health.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv('fetal_health.csv')\n",
    "\n",
    "# Separate features and target\n",
    "X = df.drop('fetal_health', axis=1)\n",
    "y = df['fetal_health']\n",
    "\n",
    "# Feature Selection: select top 8 features\n",
    "selector = SelectKBest(score_func=f_classif, k=8)\n",
    "X_new = selector.fit_transform(X, y)\n",
    "\n",
    "# Scaling\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X_new)\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X_scaled, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Apply SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "# Initialize models\n",
    "models = {\n",
    "    'Random Forest': RandomForestClassifier(random_state=42),\n",
    "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
    "    'Logistic Regression': LogisticRegression(max_iter=500, random_state=42),\n",
    "    'K-Nearest Neighbors': KNeighborsClassifier()\n",
    "}\n",
    "\n",
    "# Metrics dictionary to hold results\n",
    "results = {\n",
    "    'Model': [],\n",
    "    'Accuracy': [],\n",
    "    'Precision': [],\n",
    "    'Recall': [],\n",
    "    'F1-Score': []\n",
    "}\n",
    "\n",
    "# Train, predict and evaluate\n",
    "for name, model in models.items():\n",
    "    model.fit(X_train_res, y_train_res)\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    results['Model'].append(name)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred))\n",
    "    results['Precision'].append(precision_score(y_test, y_pred, average='weighted'))\n",
    "    results['Recall'].append(recall_score(y_test, y_pred, average='weighted'))\n",
    "    results['F1-Score'].append(f1_score(y_test, y_pred, average='weighted'))\n",
    "\n",
    "# Convert results to DataFrame for easy visualization\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "print(results_df)\n",
    "\n",
    "# Plot Accuracy Comparison\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.bar(results_df['Model'], results_df['Accuracy'], color=['blue', 'green', 'orange', 'red'])\n",
    "plt.title('Model Accuracy Comparison')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0,1])\n",
    "for i, v in enumerate(results_df['Accuracy']):\n",
    "    plt.text(i, v + 0.02, f\"{v:.2f}\", ha='center', fontweight='bold')\n",
    "plt.show()\n",
    "\n",
    "# Concluding statement based on accuracy\n",
    "best_model_index = results_df['Accuracy'].idxmax()\n",
    "best_model_name = results_df.loc[best_model_index, 'Model']\n",
    "best_accuracy = results_df.loc[best_model_index, 'Accuracy']\n",
    "\n",
    "print(f\"\\nAfter comparing the models with the help of the bar plot, we conclude that \"\n",
    "      f\"the '{best_model_name}' model shows the highest accuracy ({best_accuracy:.4f}) \"\n",
    "      f\"and is performing well for predicting fetal health.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9aa31fda-5d4a-4a7d-b378-79262aa079a2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
